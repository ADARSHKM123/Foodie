{"ast":null,"code":"var _jsxFileName = \"C:\\\\me\\\\design\\\\0001 React Files\\\\Foodie\\\\01-starting-project\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from './Context';\nimport { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const exited = state.items.findIndex(items => items.id === action.item.id);\n    console.log(exited);\n    const existedItem = state.items[exited];\n    let updatedItems;\n\n    if (existedItem) {\n      const updatedItem = { ...existedItem,\n        amount: existedItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[exited] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'CLEAR') {\n    return {};\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartstate, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartstate.items,\n    totalAmount: cartstate.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"/kFrQ/P4QPlxauMCp+TPaNGFJgo=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/me/design/0001 React Files/Foodie/01-starting-project/src/store/CartProvider.js"],"names":["CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","exited","findIndex","id","console","log","existedItem","updatedItems","updatedItem","concat","existingCartItemIndex","existingItem","filter","CartProvider","props","cartstate","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import CartContext from './Context'\r\nimport { useReducer } from 'react'\r\n\r\nconst defaultCartState = {\r\n    items: [],\r\n    totalAmount: 0,\r\n}\r\n\r\nconst cartReducer = (state, action) => {\r\n    if (action.type === 'ADD') {\r\n        const updatedTotalAmount =\r\n            state.totalAmount + action.item.price * action.item.amount\r\n\r\n    const exited = state.items.findIndex(items=> items.id === action.item.id)\r\n    console.log(exited);\r\n    const existedItem = state.items[exited];\r\n\r\n    let updatedItems;\r\n\r\n\r\n\r\n    if(existedItem){\r\n       const updatedItem={\r\n         ...existedItem,\r\n         amount:existedItem.amount + action.item.amount,\r\n     };\r\n     updatedItems=[...state.items];\r\n     updatedItems[exited] = updatedItem;\r\n    }else{\r\n     updatedItems = state.items.concat(action.item);\r\n    }\r\n        return {\r\n            items: updatedItems,  \r\n            totalAmount: updatedTotalAmount,\r\n        }\r\n    }\r\n\r\n\r\n    if (action.type === 'REMOVE') {\r\n        const existingCartItemIndex = state.items.findIndex(\r\n          (item) => item.id === action.id\r\n        );\r\n        const existingItem = state.items[existingCartItemIndex];\r\n        const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n        let updatedItems;\r\n        if (existingItem.amount === 1) {\r\n          updatedItems = state.items.filter(item => item.id !== action.id);\r\n        } else {\r\n          const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n          updatedItems = [...state.items];\r\n          updatedItems[existingCartItemIndex] = updatedItem;\r\n        }\r\n    \r\n        return {\r\n          items: updatedItems,\r\n          totalAmount: updatedTotalAmount\r\n        };\r\n      }\r\n\r\n      if(action.type === 'CLEAR'){\r\n          return{\r\n              \r\n          }\r\n      }\r\n    return defaultCartState\r\n}\r\n\r\nconst CartProvider = (props) => {\r\n    const [cartstate, dispatchCartAction] = useReducer(\r\n        cartReducer,\r\n        defaultCartState\r\n    )\r\n\r\n    const addItemToCartHandler = (item) => {\r\n        dispatchCartAction({ type: 'ADD', item: item })\r\n    }\r\n\r\n    const removeItemFromCartHandler = (id) => {\r\n        dispatchCartAction({ type: 'REMOVE', id: id })\r\n    }\r\n\r\n\r\n\r\n    const cartContext = {\r\n        items: cartstate.items,\r\n        totalAmount: cartstate.totalAmount,\r\n        addItem: addItemToCartHandler,\r\n        removeItem: removeItemFromCartHandler,\r\n    }\r\n\r\n    return (\r\n        <CartContext.Provider value={cartContext}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CartProvider\r\n"]},"metadata":{},"sourceType":"module"}